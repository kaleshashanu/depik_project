!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.5.4	//
ACCEPT_ALL	./rtldrv.c	72;"	d	file:
ACCEPT_BROADCAST	./rtldrv.c	69;"	d	file:
ACCEPT_MULTICAST	./rtldrv.c	70;"	d	file:
ACCEPT_MY_PHYS	./rtldrv.c	71;"	d	file:
ACK_PKT	./tcpnwstk.h	21;"	d
AF_INET	./nwstk.h	130;"	d
APPOBJS	./Makefile	/^APPOBJS=sysInit.o usrcfg.o app.o symtable.o udpSrv.o tcpsrv.o$/;"	m
AR	./Makefile	/^AR=ar$/;"	m
ARP_ENTRY_FREE	./arp.c	27;"	d	file:
ARP_ENTRY_PENDING	./arp.c	28;"	d	file:
ARP_ENTRY_RESOLVED	./arp.c	29;"	d	file:
ARP_PKT	./nwstk.h	20;"	d
ARP_REQ	./arp.c	31;"	d	file:
ARP_RESP	./arp.c	32;"	d	file:
BIND_BIT	./nwstk.h	126;"	d
BIND_BIT	./tcpnwstk.h	32;"	d
BUF_SIZE	./tcpnwstk.h	40;"	d
CC	./Makefile	/^CC=cc$/;"	m
CFG9346	./rtldrv.c	30;"	d	file:
CFLAGS	./Makefile	/^CFLAGS         = $(INCDIR) -c  $/;"	m
CHIPCMD	./rtldrv.c	22;"	d	file:
CLOSED	./tcpnwstk.h	/^  CLOSED,$/;"	e
CLOSE_WAIT	./tcpnwstk.h	/^  CLOSE_WAIT,$/;"	e
CMD_RESET	./rtldrv.c	75;"	d	file:
CMD_RX_ENB	./rtldrv.c	73;"	d	file:
CMD_TX_ENB	./rtldrv.c	74;"	d	file:
CONFIG0	./rtldrv.c	31;"	d	file:
CONFIG1	./rtldrv.c	32;"	d	file:
CONNECT_BIT	./nwstk.h	127;"	d
CONNECT_BIT	./tcpnwstk.h	33;"	d
CP	./Makefile	/^CP=@cp$/;"	m
DEV_ID	./rtldrv.c	60;"	d	file:
ERROR	./tcpnwstk.h	37;"	d
ESTABLISHED	./tcpnwstk.h	/^  ESTABLISHED,$/;"	e
ETH_ADD_LEN	./tcpnwstk.h	9;"	d
ETH_BADPKT_CNT	./ethdrv.h	15;"	d
ETH_BADPKT_CNT	./rtldrv.h	15;"	d
ETH_BASE_ERR	./ethdrv.h	4;"	d
ETH_BASE_ERR	./rtldrv.h	4;"	d
ETH_CARD_NOT_FOUND_ERR	./ethdrv.h	6;"	d
ETH_CARD_NOT_FOUND_ERR	./rtldrv.h	6;"	d
ETH_HDR_LEN	./nwstk.h	16;"	d
ETH_HDR_LEN	./tcpnwstk.h	11;"	d
ETH_INV_CMD_ERR	./ethdrv.h	7;"	d
ETH_INV_CMD_ERR	./rtldrv.h	7;"	d
ETH_ISR_CNT	./ethdrv.h	11;"	d
ETH_ISR_CNT	./rtldrv.h	11;"	d
ETH_ISR_INSTALL_ERR	./ethdrv.h	5;"	d
ETH_ISR_INSTALL_ERR	./rtldrv.h	5;"	d
ETH_MAX_STATS	./ethdrv.h	17;"	d
ETH_MAX_STATS	./rtldrv.h	17;"	d
ETH_RESET_NOT_COMPLETE_ERR	./ethdrv.h	8;"	d
ETH_RESET_NOT_COMPLETE_ERR	./rtldrv.h	8;"	d
ETH_RXOK_CNT	./ethdrv.h	12;"	d
ETH_RXOK_CNT	./rtldrv.h	12;"	d
ETH_TOOLONG_CNT	./ethdrv.h	14;"	d
ETH_TOOLONG_CNT	./rtldrv.h	14;"	d
ETH_TXERR_CNT	./ethdrv.h	16;"	d
ETH_TXERR_CNT	./rtldrv.h	16;"	d
ETH_TXOK_CNT	./ethdrv.h	13;"	d
ETH_TXOK_CNT	./rtldrv.h	13;"	d
FALSE	./arp.c	22;"	d	file:
FALSE	./rtldrv.c	10;"	d	file:
FIN_ACK_PKT	./tcpnwstk.h	29;"	d
FIN_PKT	./tcpnwstk.h	17;"	d
FIN_PSH_ACK_PKT	./tcpnwstk.h	27;"	d
FIN_WAIT1	./tcpnwstk.h	/^  FIN_WAIT1,$/;"	e
FIN_WAIT2	./tcpnwstk.h	/^  FIN_WAIT2,$/;"	e
FREE	./nwstk.h	134;"	d
FREE	./rtldrv.c	9;"	d	file:
HDR_LEN	./nwstk.h	128;"	d
HLTCLK	./rtldrv.c	33;"	d	file:
HW_ADRS_LEN	./nwstk.h	15;"	d
ICMP_ECHO_REQ	./icmp.c	32;"	d	file:
ICMP_ECHO_RESP	./icmp.c	31;"	d	file:
IFC_UP	./iface.c	13;"	d	file:
INCDIR	./Makefile	/^INCDIR         = -I\/usr\/local\/dpk220r3$/;"	m
INT16	./nwstk.h	/^typedef  short           INT16;$/;"	t
INT32	./nwstk.h	/^typedef  int             INT32;$/;"	t
INT8	./nwstk.h	/^typedef  char            INT8;$/;"	t
INTIAL_WND_SIZE	./tcpnwstk.h	38;"	d
INTRMASK	./rtldrv.c	25;"	d	file:
INTRSTATUS	./rtldrv.c	26;"	d	file:
IOCTL_DISABLE_PROMISC	./rtldrv.h	27;"	d
IOCTL_DISABLE_RECEPTION	./ethdrv.h	24;"	d
IOCTL_DISABLE_RECEPTION	./rtldrv.h	24;"	d
IOCTL_ENABLE_PROMISC	./rtldrv.h	26;"	d
IOCTL_ENABLE_RECEPTION	./ethdrv.h	23;"	d
IOCTL_ENABLE_RECEPTION	./rtldrv.h	23;"	d
IOCTL_ETH_MAX	./rtldrv.h	28;"	d
IOCTL_GET_MAC_ADDRS	./ethdrv.h	21;"	d
IOCTL_GET_MAC_ADDRS	./rtldrv.h	21;"	d
IOCTL_GET_RXQ_PKTS	./ethdrv.h	25;"	d
IOCTL_GET_RXQ_PKTS	./rtldrv.h	25;"	d
IOCTL_GET_STATISTICS	./ethdrv.h	22;"	d
IOCTL_GET_STATISTICS	./rtldrv.h	22;"	d
IP_ADD_LEN	./tcpnwstk.h	8;"	d
IP_ADRS_LEN	./nwstk.h	14;"	d
IP_HDR_LEN	./nwstk.h	17;"	d
IP_HDR_LEN	./tcpnwstk.h	10;"	d
IP_PKT	./nwstk.h	19;"	d
ISN	./tcpnwstk.h	36;"	d
ISN2	./tcpnwstk.h	41;"	d
L1	./sysInit.S	/^L1:$/;"	l
LAST_ACK	./tcpnwstk.h	/^  LAST_ACK,$/;"	e
LD	./Makefile	/^LD=ld$/;"	m
LIBDIR	./Makefile	/^LIBDIR         = -L\/usr\/local\/dpk220r3$/;"	m
LIBS	./Makefile	/^LIBS           = -ldpk$/;"	m
LISTEN	./tcpnwstk.h	/^  LISTEN,$/;"	e
LOCAL	./arp.c	23;"	d	file:
LOCAL	./ip.c	8;"	d	file:
Lfe1	./sysInit.S	/^Lfe1:$/;"	l
MAC0	./rtldrv.c	15;"	d	file:
MAXSIZE	./arp.c	20;"	d	file:
MAX_ARP_ENTRIES	./arp.c	25;"	d	file:
MAX_IFACES	./nwstk.h	74;"	d
MAX_LQ_SIZE	./tcpnwstk.h	5;"	d
MAX_MSG	./tcpsrv.c	7;"	d	file:
MAX_MSG	./udpcli.c	9;"	d	file:
MAX_PKT_BUFS	./pktbuf.c	5;"	d	file:
MAX_PKT_BUF_SIZE	./pktbuf.h	4;"	d
MAX_RETRYS	./tcpnwstk.h	42;"	d
MAX_SOCKETS	./nwstk.h	133;"	d
MCA	./rtldrv.c	16;"	d	file:
MIN_SPACE	./tcpnwstk.h	43;"	d
MSS	./tcpnwstk.h	44;"	d
NM	./Makefile	/^NM=@nm$/;"	m
NULL	./pktbuf.c	4;"	d	file:
OC	./Makefile	/^OC=@objcopy$/;"	m
PROTO_ICMP	./nwstk.h	22;"	d
PROTO_TCP	./nwstk.h	23;"	d
PROTO_UDP	./nwstk.h	24;"	d
PSH_ACK_PKT	./tcpnwstk.h	26;"	d
PSH_PKT	./tcpnwstk.h	20;"	d
PSUDO_HDR_LEN	./tcpnwstk.h	14;"	d
RER	./rtldrv.c	64;"	d	file:
RM	./Makefile	/^RM=@rm$/;"	m
ROK	./rtldrv.c	63;"	d	file:
RST_ACK_PKT	./tcpnwstk.h	28;"	d
RST_PKT	./tcpnwstk.h	19;"	d
RXBUF	./rtldrv.c	19;"	d	file:
RXBUFADDR	./rtldrv.c	24;"	d	file:
RXBUFPTR	./rtldrv.c	23;"	d	file:
RXCONFIG	./rtldrv.c	28;"	d	file:
RXEARLYCNT	./rtldrv.c	20;"	d	file:
RXEARLYSTATUS	./rtldrv.c	21;"	d	file:
RXMISSED	./rtldrv.c	29;"	d	file:
RXOVW	./rtldrv.c	67;"	d	file:
RX_BUF_LEN	./rtldrv.c	82;"	d	file:
RX_BUF_LEN_IDX	./rtldrv.c	81;"	d	file:
RX_DMA_BURST	./rtldrv.c	78;"	d	file:
RX_FIFO_THRESH	./rtldrv.c	77;"	d	file:
RxBadAlign	./rtldrv.c	/^  RxBadAlign  = 0x0002, $/;"	e	enum:RxStatusBits	file:
RxBadSymbol	./rtldrv.c	/^  RxBadSymbol = 0x0020, $/;"	e	enum:RxStatusBits	file:
RxBroadcast	./rtldrv.c	/^  RxBroadcast = 0x2000,$/;"	e	enum:RxStatusBits	file:
RxCRCErr	./rtldrv.c	/^  RxCRCErr    = 0x0004,$/;"	e	enum:RxStatusBits	file:
RxMulticast	./rtldrv.c	/^  RxMulticast = 0x8000, $/;"	e	enum:RxStatusBits	file:
RxPhysical	./rtldrv.c	/^  RxPhysical  = 0x4000, $/;"	e	enum:RxStatusBits	file:
RxRunt	./rtldrv.c	/^  RxRunt      = 0x0010, $/;"	e	enum:RxStatusBits	file:
RxStatusBits	./rtldrv.c	/^enum RxStatusBits $/;"	g	file:
RxStatusOK	./rtldrv.c	/^  RxStatusOK  = 0x0001,$/;"	e	enum:RxStatusBits	file:
RxTooLong	./rtldrv.c	/^  RxTooLong   = 0x0008, $/;"	e	enum:RxStatusBits	file:
SOCK_DGRAM	./nwstk.h	131;"	d
SOCK_STREAM	./nwstk.h	132;"	d
SRV_IP_ADRS	./udpcli.c	7;"	d	file:
SRV_TCP_PORT	./tcpsrv.c	6;"	d	file:
SRV_UDP_PORT	./udpcli.c	8;"	d	file:
SUCCESS	./arp.c	19;"	d	file:
SUCCESS	./nwstk.h	125;"	d
SUCCESS	./rtldrv.c	12;"	d	file:
SYN_ACK_PKT	./tcpnwstk.h	25;"	d
SYN_PKT	./tcpnwstk.h	18;"	d
SYN_RCVD	./tcpnwstk.h	/^  SYN_RCVD,$/;"	e
SYN_SENT	./tcpnwstk.h	/^  SYN_SENT,$/;"	e
TCP_HDR_LEN	./tcpnwstk.h	12;"	d
TCP_PROTO	./tcpnwstk.h	39;"	d
TCP_TOT_HDR_LEN	./tcpnwstk.h	13;"	d
TER	./rtldrv.c	66;"	d	file:
TIME_WAIT	./tcpnwstk.h	/^  TIME_WAIT,$/;"	e
TOK	./rtldrv.c	65;"	d	file:
TRUE	./arp.c	21;"	d	file:
TRUE	./rtldrv.c	11;"	d	file:
TXADDR0	./rtldrv.c	18;"	d	file:
TXCONFIG	./rtldrv.c	27;"	d	file:
TXSTATUS0	./rtldrv.c	17;"	d	file:
TX_DMA_BURST	./rtldrv.c	79;"	d	file:
TX_FIFO_THESH	./rtldrv.c	84;"	d	file:
TX_FLAG	./rtldrv.c	85;"	d	file:
TxAborted	./rtldrv.c	/^  TxAborted     = 0x4000000, $/;"	e	enum:TxStatusBits	file:
TxCarrierLost	./rtldrv.c	/^  TxCarrierLost = 0x8000000$/;"	e	enum:TxStatusBits	file:
TxHostOwns	./rtldrv.c	/^  TxHostOwns    = 0x2000, $/;"	e	enum:TxStatusBits	file:
TxOutOfWindow	./rtldrv.c	/^  TxOutOfWindow = 0x2000000, $/;"	e	enum:TxStatusBits	file:
TxStatOK	./rtldrv.c	/^  TxStatOK      = 0x8000,$/;"	e	enum:TxStatusBits	file:
TxStatusBits	./rtldrv.c	/^enum TxStatusBits $/;"	g	file:
TxUnderrun	./rtldrv.c	/^  TxUnderrun    = 0x4000, $/;"	e	enum:TxStatusBits	file:
UDPOBJS	./Makefile	/^UDPOBJS= rtldrv.o iface.o pktbuf.o arp.o icmp.o nwutil.o nwstk.o \\$/;"	m
UDP_PROTO	./nwstk.h	129;"	d
UINT16	./nwstk.h	/^typedef  unsigned short   UINT16;$/;"	t
UINT32	./nwstk.h	/^typedef  unsigned int     UINT32;$/;"	t
UINT8	./nwstk.h	/^typedef  unsigned char    UINT8;$/;"	t
UNSUCCESS	./timer.h	24;"	d
URG_PKT	./tcpnwstk.h	22;"	d
USED	./nwstk.h	135;"	d
VEN_ID	./rtldrv.c	59;"	d	file:
_NWSTK_H_	./nwstk.h	2;"	d
__PKT_BUF_H_	./pktbuf.h	2;"	d
__TCP_NWSTK_H_	./tcpnwstk.h	2;"	d
__TIMER_H_	./timer.h	2;"	d
___gnu_compiled_c	./sysInit.S	/^___gnu_compiled_c:$/;"	l
a	./main.c	/^int a=134;$/;"	v
accept	./socket.c	/^int accept(int sockfd, struct sockaddr_in *addr, int addLen)$/;"	f
ackno	./tcpnwstk.h	/^  INT32   ackno;$/;"	m	struct:tcpHdr_s
ackpendflg	./tcpnwstk.h	/^  UINT32 ackpendflg; \/\/ $/;"	m	struct:tcpCb_s
addAlarmList	./timer.c	/^INT32 addAlarmList(alarm_t *pnode)$/;"	f
addToLQList	./tcp1.c	/^void addToLQList(tcpCb_t *tcb)$/;"	f
addToNonLQList	./tcp1.c	/^void  addToNonLQList(tcpCb_t *tcb)$/;"	f
alarm	./timer.c	/^alarm_t *alarm;$/;"	v
alarmInit	./timer.c	/^INT32  alarmInit()$/;"	f
alarmList	./timer.c	/^alarm_t *alarmList;$/;"	v
alarmMutex	./timer.c	/^SEM_ID alarmMutex;$/;"	v
alarmStart	./timer.c	/^UINT32 alarmStart(INT32 tmOutInMilliSecs,void(*fp)(void *arg),void *arg)$/;"	f
alarmStop	./timer.c	/^INT32 alarmStop(UINT32 alarmId)$/;"	f
alarmTask	./timer.c	/^void alarmTask()$/;"	f
alarm_s	./timer.h	/^typedef struct alarm_s$/;"	s
alarm_t	./timer.h	/^}alarm_t;$/;"	t
allocLocalPort	./udp.c	/^int allocLocalPort()$/;"	f
allocSocket	./socket.c	/^int allocSocket(int *sockfd)$/;"	f
alsn	./tcpnwstk.h	/^  UINT32 alsn;\/\/Data is allowed to send upto this sequece number.$/;"	m	struct:tcpCb_s
applicationStart	./app.c	/^void applicationStart()$/;"	f
arg	./timer.h	/^  void     *arg;$/;"	m	struct:alarm_s
arpAddEntry	./arp.c	/^LOCAL int arpAddEntry(UINT8 *ipAdrs, UINT8 *hwAdrs)$/;"	f
arpDispTbl	./arp.c	/^LOCAL int arpDispTbl(int argc, char * argv[])$/;"	f
arpEntry_t	./arp.c	/^}arpEntry_t;$/;"	t	file:
arpFindEntry	./arp.c	/^LOCAL int arpFindEntry(UINT8 *ipAdrs, int *index)$/;"	f
arpGetFreeEntry	./arp.c	/^LOCAL int arpGetFreeEntry(int *indx)$/;"	f
arpHitCnt	./arp.c	/^LOCAL UINT32  arpInCnt,arpInReqCnt, arpInReqMatchCnt, arpInRespCnt, arpHitCnt;$/;"	v
arpIn	./arp.c	/^void arpIn(pktBuf_t *pkt)$/;"	f
arpInCnt	./arp.c	/^LOCAL UINT32  arpInCnt,arpInReqCnt, arpInReqMatchCnt, arpInRespCnt, arpHitCnt;$/;"	v
arpInReqCnt	./arp.c	/^LOCAL UINT32  arpInCnt,arpInReqCnt, arpInReqMatchCnt, arpInRespCnt, arpHitCnt;$/;"	v
arpInReqMatchCnt	./arp.c	/^LOCAL UINT32  arpInCnt,arpInReqCnt, arpInReqMatchCnt, arpInRespCnt, arpHitCnt;$/;"	v
arpInRespCnt	./arp.c	/^LOCAL UINT32  arpInCnt,arpInReqCnt, arpInReqMatchCnt, arpInRespCnt, arpHitCnt;$/;"	v
arpInit	./arp.c	/^void arpInit()$/;"	f
arpPkt_t	./nwstk.h	/^}arpPkt_t;$/;"	t
arpReqSentCnt	./arp.c	/^LOCAL UINT32  arpSendIpPktCnt, arpReqSentCnt, arpSentIpPktWRCnt;$/;"	v
arpSendIpPkt	./arp.c	/^int arpSendIpPkt(pktBuf_t *pkt, UINT8 *nxtHopIpAdrs, iface_t *pIf)$/;"	f
arpSendIpPktCnt	./arp.c	/^LOCAL UINT32  arpSendIpPktCnt, arpReqSentCnt, arpSentIpPktWRCnt;$/;"	v
arpSentIpPktWRCnt	./arp.c	/^LOCAL UINT32  arpSendIpPktCnt, arpReqSentCnt, arpSentIpPktWRCnt;$/;"	v
arpStat	./arp.c	/^LOCAL int arpStat(int argc, char * argv[])$/;"	f
arpTbl	./arp.c	/^LOCAL arpEntry_t arpTbl[MAX_ARP_ENTRIES];$/;"	v
avlsn	./tcpnwstk.h	/^  UINT32 avlsn;\/\/Upto this seqno data is avilable in tx buffer.$/;"	m	struct:tcpCb_s
bind	./socket.c	/^int bind(int sockfd, struct sockaddr_in *addr, int addLen)$/;"	f
bssEnd	./usrcfg.c	/^unsigned char *bssEnd = &_end;$/;"	v
bssStart	./usrcfg.c	/^unsigned char *bssStart =&_edata;$/;"	v
buf	./pktbuf.h	/^  unsigned char     buf[MAX_PKT_BUF_SIZE];$/;"	m	struct:pktBuf_s
busy	./rtldrv.c	/^  int              busy;$/;"	m	file:
chksum	./tcpnwstk.h	/^  UINT16  chksum;$/;"	m	struct:tcpHdr_s
cksum	./nwstk.h	/^  UINT16  cksum;$/;"	m
cnt	./pktbuf.h	/^  int      cnt;$/;"	m	struct:pktQ_s
computeChksum	./tcp1.c	/^UINT16 computeChksum(unsigned char *pseudoHdr,pktBuf_t *pkt,short Len)$/;"	f
computechecksum	./tcp.c	/^UINT16 computechecksum(UINT8 *psuedoHdr, pktBuf_t *pkt, INT16 len)$/;"	f
connect	./socket.c	/^int connect(int sockfd, struct sockaddr_in *addr, int addLen)$/;"	f
copybuf	./tcp1.c	/^INT32 copybuf(tcpCb_t *tcb,UINT8 *buff,INT32 *datalen)$/;"	f
copydata	./tcp1.c	/^void copydata(pktBuf_t *pkt,tcpCb_t *tcb,INT32 datalen,INT32 optn)$/;"	f
ctrlflgs	./tcpnwstk.h	/^  UINT8   ctrlflgs;$/;"	m	struct:tcpHdr_s
cur_desc	./rtldrv.c	/^  int              cur_desc;$/;"	m	file:
data	./icmp.c	/^  UINT8   data[1];$/;"	m	file:
data	./pktbuf.h	/^  unsigned char     *data;$/;"	m	struct:pktBuf_s
deleteAlarmList	./timer.c	/^INT32 deleteAlarmList(alarm_t *pnode)$/;"	f
deleteTcpBlock	./tcp.c	/^INT32 deleteTcpBlock(tcpCb_t *pnode)$/;"	f
dispIface	./iface.c	/^void dispIface(iface_t *pif)$/;"	f
displayCtlBlk	./udp.c	/^int displayCtlBlk()$/;"	f
displaysocket	./socket.c	/^int displaysocket()$/;"	f
dport	./nwstk.h	/^  UINT16  dport;$/;"	m
dstAdrs	./nwstk.h	/^  UINT8   dstAdrs[4];$/;"	m
dstHwa	./nwstk.h	/^  unsigned char  dstHwa[6];$/;"	m
dstport	./tcpnwstk.h	/^  UINT16  dstport;$/;"	m	struct:tcpHdr_s
echoId	./icmp.c	/^  UINT16  echoId;$/;"	m	file:
echoSeq	./icmp.c	/^  UINT16  echoSeq;$/;"	m	file:
eop	./tcpnwstk.h	/^  char eop;$/;"	m	struct:tcpOpt_s
errExit	./udpcli.c	/^void errExit(char *str)$/;"	f
errexit	./tcpsrv.c	/^void errexit(char *str)$/;"	f
errno	./tcpnwstk.h	/^  INT32  errno;\/\/error no.$/;"	m	struct:tcpCb_s
ethDrv_t	./rtldrv.c	/^}ethDrv_t;$/;"	t	file:
ethHdr_t	./nwstk.h	/^}ethHdr_t;$/;"	t
ethIoctl	./rtldrv.c	/^int ethIoctl(int argc , char *argv[])$/;"	f
ethPktDrvInit	./rtldrv.c	/^int ethPktDrvInit(char *name, ui32 iobase, ui32 irq)$/;"	f
ethirq	./rtldrv.c	/^  int              ethirq;$/;"	m	file:
flagFrag	./nwstk.h	/^  UINT16  flagFrag;$/;"	m
flags	./nwstk.h	/^  UINT32  flags;$/;"	m
flags	./tcpnwstk.h	/^  UINT32 flags;\/\/flags for bind or not.$/;"	m	struct:tcpCb_s
fp	./timer.h	/^  void     (*fp)(void *arg);$/;"	m	struct:alarm_s
frQ	./pktbuf.c	/^static  pktQ_t frQ;$/;"	v	file:
freeBufs	./pktbuf.c	/^void freeBufs()$/;"	f
hdrlen	./tcpnwstk.h	/^  UINT8   hdrlen;$/;"	m	struct:tcpHdr_s
htonl	./guestr.c	/^unsigned int htonl(unsigned int temp)$/;"	f
htonl	./nwutil.c	/^unsigned int htonl(unsigned int temp)$/;"	f
htons	./guestr.c	/^unsigned short htons(unsigned short s)$/;"	f
htons	./nwutil.c	/^unsigned short htons(unsigned short s)$/;"	f
hwAdrs	./arp.c	/^  UINT8     hwAdrs[HW_ADRS_LEN];$/;"	m	file:
hwAdrs	./rtldrv.c	/^  unsigned char    hwAdrs[6];$/;"	m	file:
hwType	./nwstk.h	/^  unsigned short hwType; $/;"	m
hwaLen	./nwstk.h	/^  unsigned char  hwaLen;$/;"	m
iccmp	./r.c	/^int iccmp(unsigned char *ch1,unsigned char *ch2)$/;"	f
icmpChksum	./icmp.c	/^  UINT16  icmpChksum;$/;"	m	file:
icmpCode	./icmp.c	/^  UINT8   icmpCode;$/;"	m	file:
icmpEcho_t	./icmp.c	/^}icmpEcho_t;$/;"	t	file:
icmpHdr_t	./icmp.c	/^}icmpHdr_t;$/;"	t	file:
icmpIn	./icmp.c	/^void icmpIn(pktBuf_t *pkt)$/;"	f
icmpInit	./icmp.c	/^int icmpInit()$/;"	f
icmpSendEchoReply	./icmp.c	/^void icmpSendEchoReply(pktBuf_t *pkt, icmpHdr_t *pic)$/;"	f
icmpType	./icmp.c	/^  UINT8   icmpType;$/;"	m	file:
ifConfInit	./iface.c	/^void ifConfInit()$/;"	f
ifConfig	./iface.c	/^void ifConfig(int argc, char *argv[])$/;"	f
ifNum	./pktbuf.h	/^  int               ifNum;$/;"	m	struct:pktBuf_s
ifNum	./rtldrv.c	/^  int              ifNum;$/;"	m	file:
ifaceInit	./iface.c	/^ifaceInit()$/;"	f
ifaceShow	./iface.c	/^void ifaceShow(int argc, char *argv[])$/;"	f
ifaceTbl	./iface.c	/^iface_t  *ifaceTbl[MAX_IFACES];$/;"	v
iface_t	./nwstk.h	/^}iface_t; \/\/this structure is useful for storing the information of       sender i.e. ipaddr,name of the host etc.$/;"	t
ifcRegister	./iface.c	/^int ifcRegister(char *name, void *pDev, int (*sendFP)(void *, pktBuf_t *),$/;"	f
in_addr	./nwstk.h	/^struct in_addr$/;"	s
inet_addr	./guestr.c	/^int inet_addr(char *str)$/;"	f
inet_addr	./nwutil.c	/^int inet_addr(char *str)$/;"	f
installNetDrivers	./rtldrv.c	/^int installNetDrivers()$/;"	f
iobase	./rtldrv.c	/^  int              iobase;$/;"	m	file:
ioctlFP	./nwstk.h	/^  INT32   (*ioctlFP)(void *, int cmd, void *);$/;"	m
ip2bin	./guestr.c	/^int ip2bin(char *str, UINT8 *ch)$/;"	f
ip2bin	./nwutil.c	/^int ip2bin(char *str, UINT8 *ch)$/;"	f
ip2bin	./r.c	/^int ip2bin(char *str, unsigned char *ch)$/;"	f
ipAdrs	./arp.c	/^  UINT8     ipAdrs[IP_ADRS_LEN];$/;"	m	file:
ipAdrs	./nwstk.h	/^  UINT8   ipAdrs[4];$/;"	m
ipHdr	./ip.c	/^  ipHdr_t *ipHdr = (ipHdr_t *)pkt->data;$/;"	v
ipHdr	./ip.c	/^  ipHntohs(ipHdr);$/;"	v
ipHdr_t	./nwstk.h	/^} ipHdr_t;   $/;"	t
ipPktCnt	./ip.c	/^LOCAL UINT32 ipPktCnt, ipPktTcp, ipPktUdp, ipPktIcmp, ipPktUnKnown;$/;"	v
ipPktIcmp	./ip.c	/^LOCAL UINT32 ipPktCnt, ipPktTcp, ipPktUdp, ipPktIcmp, ipPktUnKnown;$/;"	v
ipPktTcp	./ip.c	/^LOCAL UINT32 ipPktCnt, ipPktTcp, ipPktUdp, ipPktIcmp, ipPktUnKnown;$/;"	v
ipPktUdp	./ip.c	/^LOCAL UINT32 ipPktCnt, ipPktTcp, ipPktUdp, ipPktIcmp, ipPktUnKnown;$/;"	v
ipPktUnKnown	./ip.c	/^LOCAL UINT32 ipPktCnt, ipPktTcp, ipPktUdp, ipPktIcmp, ipPktUnKnown;$/;"	v
isn	./tcpnwstk.h	/^  UINT32 isn;\/\/Initial sequnece number.$/;"	m	struct:tcpCb_s
isrRx	./rtldrv.c	/^static int isrRx(ethDrv_t *pCb)$/;"	f	file:
isrTx	./rtldrv.c	/^static int isrTx(ethDrv_t *pCb)$/;"	f	file:
lasn	./tcpnwstk.h	/^  UINT32 lasn;\/\/Last acknowledged sequence number.$/;"	m	struct:tcpCb_s
len	./ip.c	/^  int len;$/;"	v
len	./nwstk.h	/^  UINT16  len;$/;"	m
len	./pktbuf.h	/^  int               len;$/;"	m	struct:pktBuf_s
lip	./nwstk.h	/^  UINT8           lip[4];  \/\/local ip$/;"	m	struct:udpCb_s
lip	./tcpnwstk.h	/^  UINT8  lip[4];\/\/Local IP address of the host.$/;"	m	struct:tcpCb_s
lisndispCtlBlk	./tcp1.c	/^int lisndispCtlBlk()$/;"	f
listen	./socket.c	/^int listen(int sockfd, int qlen)$/;"	f
listenQ	./tcpnwstk.h	/^  struct tcpCb_s *listenQ[MAX_LQ_SIZE],*lptr;$/;"	m	struct:tcpCb_s
lport	./nwstk.h	/^  UINT16          lport;   \/\/local port$/;"	m	struct:udpCb_s
lport	./tcpnwstk.h	/^  UINT16 lport;\/\/Local port of the host.$/;"	m	struct:tcpCb_s
lptr	./tcpnwstk.h	/^  struct tcpCb_s *listenQ[MAX_LQ_SIZE],*lptr;$/;"	m	struct:tcpCb_s
lqcnt	./tcpnwstk.h	/^  UINT32 lqcnt;\/\/present listen Q count.$/;"	m	struct:tcpCb_s
lqmax	./tcpnwstk.h	/^  UINT32 lqmax;\/\/Maximum listen Q count.$/;"	m	struct:tcpCb_s
lwin	./tcpnwstk.h	/^  UINT32 lwin;\/\/local window size.$/;"	m	struct:tcpCb_s
macAdrs	./nwstk.h	/^  UINT8   macAdrs[6];$/;"	m
main	./a.c	/^main()$/;"	f
main	./main.c	/^main()$/;"	f
main	./r.c	/^main()$/;"	f
main	./udpcli.c	/^int main()$/;"	f
min	./tcp1.c	/^INT32 min(INT32 val,INT32 datalen)$/;"	f
mss	./tcpnwstk.h	/^  UINT16 mss;$/;"	m	struct:tcpCb_s
mss	./tcpnwstk.h	/^  char mss[4];$/;"	m	struct:tcpOpt_s
mxsem	./tcpnwstk.h	/^  SEM_ID mxsem;\/\/mutual exclusion semaphore.$/;"	m	struct:tcpCb_s
name	./nwstk.h	/^  INT8    name[16];$/;"	m
netEnQ	./nwstk.c	/^void netEnQ(pktBuf_t *pkt)$/;"	f
netTask	./nwstk.c	/^void netTask()$/;"	f
noOfSymbols	./symtable.c	/^int noOfSymbols = 0;$/;"	v
nonLisndispCtlBlk	./tcp1.c	/^int nonLisndispCtlBlk()$/;"	f
nop	./tcpnwstk.h	/^  char nop;$/;"	m	struct:tcpOpt_s
nrsn	./tcpnwstk.h	/^  UINT32 nrsn;\/\/Next receiving sequence no.$/;"	m	struct:tcpCb_s
nsn	./tcpnwstk.h	/^  UINT32 nsn;\/\/Next sequence no.$/;"	m	struct:tcpCb_s
ntoH	./guestr.c	/^void ntoH(unsigned char *ptr,int len)$/;"	f
ntoH	./nwutil.c	/^void ntoH(unsigned char *ptr,int len)$/;"	f
ntohs	./guestr.c	/^unsigned short ntohs(unsigned short s)$/;"	f
ntohs	./nwutil.c	/^unsigned short ntohs(unsigned short s)$/;"	f
operation	./nwstk.h	/^  unsigned short operation;\/\/this field tell the operation to be                                    performed on the packet$/;"	m
pCbpktQ	./nwstk.h	/^  pktQ_t         *pCbpktQ; \/\/pointer to packet Queue$/;"	m	struct:udpCb_s
pDev	./nwstk.h	/^  void    *pDev;$/;"	m
pHd	./pktbuf.h	/^  pktBuf_t *pHd;$/;"	m	struct:pktQ_s
pHead	./timer.c	/^alarm_t *pHead,*pTail;$/;"	v
pListenQ	./tcp1.c	/^tcpCb_t *pListenQ;$/;"	v
pNext	./nwstk.h	/^  struct udpCb_s *pNext;   \/\/this is pointer to next control block in                              linked list$/;"	m	struct:udpCb_s
pNonListenQ	./tcp1.c	/^tcpCb_t *pNonListenQ;$/;"	v
pNxt	./pktbuf.h	/^  struct pktBuf_s   *pNxt;$/;"	m	struct:pktBuf_s
pSockCb	./nwstk.h	/^  void   *pSockCb; \/\/this field is pointer to the socket control block$/;"	m
pTail	./timer.c	/^alarm_t *pHead,*pTail;$/;"	v
pTl	./pktbuf.h	/^  pktBuf_t *pTl;$/;"	m	struct:pktQ_s
ping	./icmp.c	/^int ping(int argc,char *argv[])$/;"	f
pktAlloc	./pktbuf.c	/^pktBuf_t *pktAlloc()$/;"	f
pktBufInit	./pktbuf.c	/^void pktBufInit()$/;"	f
pktBuf_s	./pktbuf.h	/^typedef struct pktBuf_s$/;"	s
pktBuf_t	./pktbuf.h	/^}pktBuf_t;$/;"	t
pktBufs	./pktbuf.c	/^static  pktBuf_t pktBufs[MAX_PKT_BUFS];$/;"	v	file:
pktCnt	./nwstk.h	/^  UINT16          pktCnt;  \/\/packet count$/;"	m	struct:udpCb_s
pktDeQ	./pktbuf.c	/^pktBuf_t *pktDeQ(pktQ_t *pPktQ)$/;"	f
pktEnQ	./pktbuf.c	/^void pktEnQ(pktQ_t *pPktQ, pktBuf_t *pPkt)$/;"	f
pktFree	./pktbuf.c	/^void pktFree(pktBuf_t *pPkt)$/;"	f
pktId	./nwstk.h	/^  UINT16  pktId;$/;"	m
pktLen	./nwstk.h	/^  UINT16  pktLen;$/;"	m
pktQ	./arp.c	/^  pktQ_t    pktQ;$/;"	m	file:
pktQ_s	./pktbuf.h	/^typedef struct pktQ_s$/;"	s
pktQ_t	./pktbuf.h	/^}pktQ_t;$/;"	t
pnxt	./tcpnwstk.h	/^  struct tcpCb_s *pnxt;\/\/pionter to next control block.$/;"	m	struct:tcpCb_s
pnxt	./timer.h	/^  struct   alarm_s *pnxt;$/;"	m	struct:alarm_s
pprv	./tcpnwstk.h	/^  struct tcpCb_s *pprv;\/\/pionter to previous control block.$/;"	m	struct:tcpCb_s
pprv	./timer.h	/^  struct   alarm_s *pprv;$/;"	m	struct:alarm_s
prepareAck	./tcp1.c	/^void prepareAck(pktBuf_t *pkt,tcpCb_t *ptcb)$/;"	f
prepareAndSendAckpkt	./tcp.c	/^INT32 prepareAndSendAckpkt(tcpCb_t *tcb, pktBuf_t *ppkt)$/;"	f
prepareAndSendFINACKpkt	./tcp.c	/^INT32 prepareAndSendFINACKpkt(tcpCb_t *tcb,UINT8 *buf)$/;"	f
prepareAndSendFINpkt	./tcp.c	/^INT32 prepareAndSendFINpkt(tcpCb_t *tcb,UINT8 *buf)$/;"	f
prepareAndSendRSTpkt	./tcp.c	/^INT32 prepareAndSendRSTpkt(ipHdr_t *ipHdr, tcpHdr_t *tcpHdr)$/;"	f
prepareDataPkt	./tcp1.c	/^INT32 prepareDataPkt(tcpCb_t *tcb, pktBuf_t *datapkt)$/;"	f
preparePsuedoHdr	./tcp.c	/^void preparePsuedoHdr(UINT8 *psuedoHdr,tcpHdr_t *tcpHdr, ipHdr_t *ipHdr)$/;"	f
prepareSyn	./tcp1.c	/^void prepareSyn(tcpCb_t *tcb,pktBuf_t *pkt)$/;"	f
prepareSynAck	./tcp1.c	/^void prepareSynAck(pktBuf_t *pkt,tcpCb_t *pctcb)$/;"	f
prepareWinAck	./tcp1.c	/^void prepareWinAck(pktBuf_t *pkt,tcpCb_t *ptcb)$/;"	f
printBuf	./guestr.c	/^void printBuf(unsigned char *buf, int len)$/;"	f
printBuf	./nwutil.c	/^void printBuf(unsigned char *buf, int len)$/;"	f
printEthCnts	./rtldrv.c	/^int printEthCnts(int argc , char *argv[])$/;"	f
probeTimeOut	./tcp1.c	/^void probeTimeOut(tcpCb_t *tcb)$/;"	f
proto	./nwstk.h	/^  UINT8   proto;$/;"	m
protoLen	./nwstk.h	/^  unsigned char  protoLen;$/;"	m
protoType	./nwstk.h	/^  unsigned short protoType;$/;"	m
rbIndx	./rtldrv.c	/^  unsigned int     rbIndx;$/;"	m	file:
rcnt	./tcpnwstk.h	/^  UINT32 rcnt;\/\/receive count.$/;"	m	struct:tcpCb_s
recv	./socket.c	/^int recv(int sockfd, char *buf,  int len, int flags)$/;"	f
recvfrom	./socket.c	/^int recvfrom(int sockfd, char *buf,  int len, int flags,                                                                struct sockaddr_in *sadd,int *addrLen)$/;"	f
registerEthCliCmds	./rtldrv.c	/^void registerEthCliCmds()$/;"	f
retrys	./tcpnwstk.h	/^  UINT32 retrys;\/\/The no of retries made to transmit the same packet.$/;"	m	struct:tcpCb_s
ringBuf	./rtldrv.c	/^  unsigned char    ringBuf[RX_BUF_LEN+16]; $/;"	m	file:
rip	./nwstk.h	/^  UINT8           rip[4];  \/\/remote ip$/;"	m	struct:udpCb_s
rip	./tcpnwstk.h	/^  UINT8  rip[4];\/\/Remote IP address of the host.$/;"	m	struct:tcpCb_s
rport	./nwstk.h	/^  UINT16          rport;   \/\/remote port$/;"	m	struct:udpCb_s
rport	./tcpnwstk.h	/^  UINT16 rport;\/\/Remote port number of the host.$/;"	m	struct:tcpCb_s
rrix	./tcpnwstk.h	/^  UINT32 rrix;\/\/receive buffer read index.$/;"	m	struct:tcpCb_s
rtlIoctl	./rtldrv.c	/^int rtlIoctl(ethDrv_t *pCb, int cmd, void *buf)$/;"	f
rtlIsr	./rtldrv.c	/^static void rtlIsr(ethDrv_t *pCb)$/;"	f	file:
rtlSend	./rtldrv.c	/^void rtlSend(ethDrv_t *pCb, pktBuf_t *pkt)$/;"	f
rtlStartTx	./rtldrv.c	/^static int rtlStartTx(ethDrv_t *pCb)$/;"	f	file:
rtriptime	./tcpnwstk.h	/^  UINT32 rtriptime;\/\/Round trip time.$/;"	m	struct:tcpCb_s
rwin	./tcpnwstk.h	/^  UINT32 rwin;\/\/remote window size.$/;"	m	struct:tcpCb_s
rwix	./tcpnwstk.h	/^  UINT32 rwix;\/\/receive buffer write index.$/;"	m	struct:tcpCb_s
rxQ	./nwstk.c	/^static  pktQ_t  rxQ;$/;"	v	file:
rxbuf	./tcpnwstk.h	/^  UINT8  *rxbuf;\/\/receive buffer$/;"	m	struct:tcpCb_s
rxsem	./tcpnwstk.h	/^  SEM_ID rxsem;\/\/receive binary semaphore.$/;"	m	struct:tcpCb_s
s_addr	./nwstk.h	/^  unsigned int s_addr;$/;"	m	struct:in_addr
semID	./nwstk.h	/^  SEM_ID          semID;   \/\/semaphore id$/;"	m	struct:udpCb_s
semid	./nwstk.c	/^static  SEM_ID  semid;$/;"	v	file:
send	./socket.c	/^int send(int sockfd, char *buf,  int len, int flags)$/;"	f
sendFP	./nwstk.h	/^  INT32   (*sendFP)(void *, pktBuf_t *);$/;"	m
senderHwa	./nwstk.h	/^  unsigned char  senderHwa[6];$/;"	m
senderPra	./nwstk.h	/^  unsigned char  senderPra[4];$/;"	m
sendpkt	./tcpnwstk.h	/^  pktBuf_t *sendpkt; $/;"	m	struct:tcpCb_s
sendto	./socket.c	/^int sendto(int sockfd, char *buf,  int len, int flags, $/;"	f
seqno	./tcpnwstk.h	/^  INT32   seqno;$/;"	m	struct:tcpHdr_s
serDevName	./usrcfg.c	/^char serDevName[] = "\/dev\/ttyS0";$/;"	v
simnetInit	./nwstk.c	/^int simnetInit()$/;"	f
sin_addr	./nwstk.h	/^  struct in_addr sin_addr;     \/\/this field is ip address$/;"	m	struct:sockaddr_in
sin_family	./nwstk.h	/^  short  sin_family;           \/\/this field tells the family i.e.AF_INET                                                          or PF_INET$/;"	m	struct:sockaddr_in
sin_port	./nwstk.h	/^  UINT16 sin_port;             \/\/this filed is the port number$/;"	m	struct:sockaddr_in
sin_zero	./nwstk.h	/^  char   sin_zero[8];$/;"	m	struct:sockaddr_in
sockIndx	./tcpnwstk.h	/^  UINT32 sockIndx;\/\/the socket index.$/;"	m	struct:tcpCb_s
sockType	./nwstk.h	/^  UINT16 sockType; \/\/this field tells the type i.e.SOCK_DGRAM or                                                           SOCK_STREAM$/;"	m
sock_t	./nwstk.h	/^}sock_t; \/\/this structure is socket$/;"	t
sockaddr_in	./nwstk.h	/^struct sockaddr_in$/;"	s
socket	./socket.c	/^int socket(int domain, int type, int protocol)$/;"	f
socketClose	./socket.c	/^int socketClose(int sockfd)$/;"	f
sockets	./socket.c	/^sock_t  sockets[MAX_SOCKETS];$/;"	v
sport	./nwstk.h	/^  UINT16  sport;$/;"	m
srcAdrs	./nwstk.h	/^  UINT8   srcAdrs[4];$/;"	m
srcHwa	./nwstk.h	/^  unsigned char  srcHwa[6];$/;"	m
srcport	./tcpnwstk.h	/^  UINT16  srcport;$/;"	m	struct:tcpHdr_s
startTick	./timer.h	/^  INT32    startTick;$/;"	m	struct:alarm_s
statStrs	./rtldrv.c	/^char * statStrs[] = { $/;"	v
state	./arp.c	/^  UINT32    state;$/;"	m	file:
state	./nwstk.h	/^  UINT16          state;   \/\/this filed is state of socket i.e. BINDED $/;"	m	struct:udpCb_s
state	./tcpnwstk.h	/^  UINT16 state;\/\/Present state of the socket.$/;"	m	struct:tcpCb_s
statistics	./rtldrv.c	/^  unsigned int     statistics[ETH_MAX_STATS];$/;"	m	file:
status	./nwstk.h	/^  UINT16 status;  \/\/this field tell the status of the socket i.e.USED or                                                                  FREE$/;"	m
symbols	./symtable.c	/^symTab_t symbols[1500]    = $/;"	v
sysInit	./sysInit.S	/^sysInit:$/;"	l
targetHwa	./nwstk.h	/^  unsigned char  targetHwa[6];$/;"	m
targetPra	./nwstk.h	/^  unsigned char  targetPra[4];$/;"	m
tcnt	./tcpnwstk.h	/^  UINT32 tcnt;\/\/transission count.$/;"	m	struct:tcpCb_s
tcpAccept	./tcp1.c	/^INT32 tcpAccept(tcpCb_t *tcb,struct sockaddr_in *adr,int *adrLen)$/;"	f
tcpAckEvtProc	./tcp1.c	/^void tcpAckEvtProc(pktBuf_t *pkt,tcpCb_t *tcb)$/;"	f
tcpBind	./tcp1.c	/^INT32 tcpBind(tcpCb_t *tcb,struct sockaddr_in *addr,int len)$/;"	f
tcpCb_s	./tcpnwstk.h	/^typedef struct tcpCb_s$/;"	s
tcpCb_t	./tcpnwstk.h	/^}tcpCb_t;$/;"	t
tcpCli	./tcpsrv.c	/^void tcpCli()$/;"	f
tcpClose	./tcp.c	/^INT32 tcpClose(tcpCb_t *tcb, UINT8 *buf, INT32 len)$/;"	f
tcpConnect	./tcp1.c	/^int tcpConnect(tcpCb_t *tcb,struct sockaddr_in *adr,int *adrlen)$/;"	f
tcpDataEvtProc	./tcp1.c	/^void tcpDataEvtProc(pktBuf_t *pkt,tcpCb_t *tcb)$/;"	f
tcpEcho	./tcpsrv.c	/^void tcpEcho()$/;"	f
tcpEchoSrv	./tcpsrv.c	/^void tcpEchoSrv()$/;"	f
tcpFinEvtProc	./tcp.c	/^void tcpFinEvtProc(tcpCb_t *tcb, pktBuf_t *pkt)$/;"	f
tcpHdr_s	./tcpnwstk.h	/^typedef  struct tcpHdr_s$/;"	s
tcpHdr_t	./tcpnwstk.h	/^}tcpHdr_t;$/;"	t
tcpIn	./tcp.c	/^INT32 tcpIn(pktBuf_t *pkt)$/;"	f
tcpLSearchCb	./tcp1.c	/^tcpCb_t *tcpLSearchCb(UINT16 port)$/;"	f
tcpListen	./tcp1.c	/^INT32 tcpListen(tcpCb_t *tcb,int qlen)$/;"	f
tcpNLSearchCb	./tcp1.c	/^tcpCb_t *tcpNLSearchCb(UINT16 port)$/;"	f
tcpOpt_s	./tcpnwstk.h	/^typedef  struct tcpOpt_s$/;"	s
tcpOpt_t	./tcpnwstk.h	/^}tcpOpt_t;$/;"	t
tcpRead	./tcp1.c	/^INT32 tcpRead(tcpCb_t *tcb,UINT8 *buf,INT32 len)$/;"	f
tcpReadEvtProc	./tcp1.c	/^void tcpReadEvtProc(tcpCb_t *tcb)$/;"	f
tcpRstEvtProc	./tcp.c	/^void tcpRstEvtProc(tcpCb_t *tcb, pktBuf_t *pkt)$/;"	f
tcpSearchLstCb	./tcp.c	/^UINT32 tcpSearchLstCb(ipHdr_t *ipHdr,tcpHdr_t *tcpHdr)\/\/L$/;"	f
tcpSearchNonLstCb	./tcp.c	/^UINT32 tcpSearchNonLstCb(ipHdr_t *ipHdr,tcpHdr_t *tcpHdr) \/\/N$/;"	f
tcpSocket	./tcp1.c	/^tcpCb_t *tcpSocket(int protocol)$/;"	f
tcpSynAckEvtProc	./tcp1.c	/^void tcpSynAckEvtProc(pktBuf_t *pkt,tcpCb_t *tcb)$/;"	f
tcpSynEvtProc	./tcp1.c	/^void tcpSynEvtProc(pktBuf_t *pkt,tcpCb_t *tcb)$/;"	f
tcpWrite	./tcp1.c	/^INT32 tcpWrite(tcpCb_t *tcb,UINT8 *buff, INT32 len)$/;"	f
testIp	./iface.c	/^unsigned char testIp[4] = {192,168,2,100};$/;"	v
timeOut	./tcp1.c	/^void timeOut(tcpCb_t *tcb)$/;"	f
timerid	./tcpnwstk.h	/^  UINT32 timerid;\/\/Timer Id.$/;"	m	struct:tcpCb_s
tmOutInMilliSecs	./timer.h	/^  INT32    tmOutInMilliSecs;$/;"	m	struct:alarm_s
tmout	./tcpnwstk.h	/^  UINT32 tmout;\/\/The maximum time to wait to receive response or ACK.$/;"	m	struct:tcpCb_s
toggleCase	./udpSrv.c	/^void toggleCase(char *buf,int cnt)$/;"	f
tos	./nwstk.h	/^  UINT8   tos;$/;"	m
trix	./tcpnwstk.h	/^  UINT32 trix;\/\/transission buffer read index.$/;"	m	struct:tcpCb_s
ts	./tcpnwstk.h	/^  char ts[10];$/;"	m	struct:tcpOpt_s
ttl	./nwstk.h	/^  UINT8   ttl;$/;"	m
twix	./tcpnwstk.h	/^  UINT32 twix;\/\/transmission buffer write index. $/;"	m	struct:tcpCb_s
txQ	./rtldrv.c	/^  pktQ_t           txQ;$/;"	m	file:
txbuf	./tcpnwstk.h	/^  UINT8 *txbuf;\/\/transission buffer.$/;"	m	struct:tcpCb_s
txpkt	./rtldrv.c	/^  char             txpkt[1528];$/;"	m	file:
txsem	./tcpnwstk.h	/^  SEM_ID txsem;\/\/transmit binary semaphore.$/;"	m	struct:tcpCb_s
type	./nwstk.h	/^  unsigned short type;  \/\/this field tells the type of the data received                         i.e. ARP request or IP packet$/;"	m
udpBind	./udp.c	/^int udpBind(udpCb_t *pSockCb, struct sockaddr_in *addr, int addLen)$/;"	f
udpCbList	./udp.c	/^udpCb_t   *udpCbList;$/;"	v
udpCb_s	./nwstk.h	/^typedef struct udpCb_s$/;"	s
udpCb_t	./nwstk.h	/^}udpCb_t;$/;"	t
udpCli	./udpSrv.c	/^void udpCli()$/;"	f
udpConnect	./udp.c	/^int udpConnect(udpCb_t *pSockCb, struct sockaddr_in *addr, int addLen)$/;"	f
udpEcho	./udpSrv.c	/^void udpEcho()$/;"	f
udpEchoSrv	./udpSrv.c	/^int udpEchoSrv()$/;"	f
udpHdr_t	./nwstk.h	/^}udpHdr_t; \/\/this sturcture is UDP header.$/;"	t
udpHhtons	./udp.c	/^void udpHhtons(udpHdr_t *pUh)$/;"	f
udpHntohs	./udp.c	/^void udpHntohs(udpHdr_t *pUh)$/;"	f
udpIn	./udp.c	/^void udpIn(pktBuf_t *pkt)$/;"	f
udpRecvFrom	./udp.c	/^int udpRecvFrom(udpCb_t *pucb, INT8 *buf, int len, UINT32 flags, $/;"	f
udpSearchCb	./udp.c	/^udpCb_t *udpSearchCb(UINT16 dport)$/;"	f
udpSendto	./udp.c	/^int udpSendto(udpCb_t *pucb, INT8 *buf, INT32 len, INT32 flags,$/;"	f
udpSocket	./udp.c	/^udpCb_t *udpSocket(int protocol)$/;"	f
udpclose	./udp.c	/^int udpclose(udpCb_t *pSockCb)$/;"	f
unitNum	./nwstk.h	/^  UINT32  unitNum;$/;"	m
urgptr	./tcpnwstk.h	/^  UINT16  urgptr;$/;"	m	struct:tcpHdr_s
usrInit	./usrcfg.c	/^usrInit()$/;"	f
usrRoot	./usrcfg.c	/^void usrRoot()$/;"	f
verlen	./nwstk.h	/^  UINT8   verlen;$/;"	m
winctlflg	./tcpnwstk.h	/^  UINT32 winctlflg; \/\/$/;"	m	struct:tcpCb_s
windflag	./tcpnwstk.h	/^  UINT32 windflag; \/\/$/;"	m	struct:tcpCb_s
winzeroflg	./tcpnwstk.h	/^  UINT32 winzeroflg; \/\/$/;"	m	struct:tcpCb_s
wndsize	./tcpnwstk.h	/^  UINT16  wndsize;$/;"	m	struct:tcpHdr_s
wsf	./tcpnwstk.h	/^  char wsf[3];$/;"	m	struct:tcpOpt_s
